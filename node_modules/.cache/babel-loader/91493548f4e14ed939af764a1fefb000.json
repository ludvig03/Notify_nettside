{"ast":null,"code":"var _jsxFileName = \"/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/src/components/Klode.jsx\",\n    _s = $RefreshSig$();\n\n// import ThreeGlobe from 'three-globe';\n// import * as THREE from 'three';\n// import { react, useState, Suspense } from \"react\"\n// import { Canvas, useLoader } from \"@react-three/fiber\"\n// import Earth from \"./Earth.js\"  \n// import ReactDOM from 'react-dom'\n// import { TextureLoader } from 'three/src/loaders/TextureLoader'\n// import { useTexture } from \"@react-three/drei\"\n// export default function Klode() {\n//     const texture_6 = useLoader(TextureLoader, 'texture.jpeg')\n//     return (\n//         <div>\n//             <Canvas style={{height: \"100vh\", width: \"100vw\"}}>\n//                 <Suspense fallback={null}>\n//                     <ambientLight intensity={0.5} />\n//                     <directionalLight color=\"white\" position={[0, 0, 3]} />\n//                     <Stars radius={20} depth={50} count={5000} factor={5} saturation={0} fade speed={3}/>\n//                     <mesh position={[-3, 0, 0]}>\n//                         <sphereGeometry/>\n//                         <meshStandardMaterial map={texture_6}/>\n//                     </mesh>\n//                 </Suspense>\n//             </Canvas>   \n//             <div className=\"canvas-placeholder\"></div>\n//         </div>\n//     )\nimport React, { useRef, Suspense } from 'react';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { Stars } from \"@react-three/drei\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Earth() {\n  _s();\n\n  const successCallback = position => {\n    console.log(position);\n    var latitude = position.coords.latitude;\n    this.longitude = position.coords.longitude;\n  };\n\n  const errorCallback = error => {\n    console.error(error);\n  };\n\n  function getCord() {\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  }\n\n  getCord();\n  const texture_1 = useLoader(TextureLoader, \"https://api.mapbox.com/styles/v1/toastedbread48/cl839iz82007c14n55lu6gp4y/static/\" + latitude + \",\" + this.longitude + \",10/1280x1280?access_token=pk.eyJ1IjoidG9hc3RlZGJyZWFkNDgiLCJhIjoiY2w4Mzh2aXE3MDNqODN3cDZ0b2NvN2FtZiJ9.ECoocvTOOyxsaOV-BSBYUg\");\n  const mesh = useRef();\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.003;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [-3, 0, 0],\n    scale: 1.9,\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [1, 100]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: texture_1,\n      attach: \"material\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Earth, \"SyNNMejtEKW4Fh/yxZvWnpITKLE=\", false, function () {\n  return [useLoader, useFrame];\n});\n\n_c = Earth;\nexport default function Klode() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.06\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [-10, 1, 30],\n      angle: 0.15,\n      penumbra: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(Stars, {\n        radius: 20,\n        depth: 50,\n        count: 5000,\n        factor: 5,\n        saturation: 0,\n        fade: true,\n        speed: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Earth, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Klode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Earth\");\n$RefreshReg$(_c2, \"Klode\");","map":{"version":3,"names":["React","useRef","Suspense","Canvas","useFrame","useLoader","TextureLoader","Stars","Earth","successCallback","position","console","log","latitude","coords","longitude","errorCallback","error","getCord","navigator","geolocation","getCurrentPosition","texture_1","mesh","current","rotation","x","y","Klode","height","width"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/src/components/Klode.jsx"],"sourcesContent":["// import ThreeGlobe from 'three-globe';\n// import * as THREE from 'three';\n// import { react, useState, Suspense } from \"react\"\n// import { Canvas, useLoader } from \"@react-three/fiber\"\n// import Earth from \"./Earth.js\"  \n// import ReactDOM from 'react-dom'\n// import { TextureLoader } from 'three/src/loaders/TextureLoader'\n// import { useTexture } from \"@react-three/drei\"\n\n\n\n// export default function Klode() {\n//     const texture_6 = useLoader(TextureLoader, 'texture.jpeg')\n\n//     return (\n        \n//         <div>\n//             <Canvas style={{height: \"100vh\", width: \"100vw\"}}>\n//                 <Suspense fallback={null}>\n//                     <ambientLight intensity={0.5} />\n//                     <directionalLight color=\"white\" position={[0, 0, 3]} />\n//                     <Stars radius={20} depth={50} count={5000} factor={5} saturation={0} fade speed={3}/>\n//                     <mesh position={[-3, 0, 0]}>\n//                         <sphereGeometry/>\n//                         <meshStandardMaterial map={texture_6}/>\n//                     </mesh>\n//                 </Suspense>\n//             </Canvas>   \n//             <div className=\"canvas-placeholder\"></div>\n//         </div>\n//     )\n\nimport React, { useRef, Suspense } from 'react'\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js'\nimport { Stars } from \"@react-three/drei\"\n\n\nfunction Earth() {\n\n    const successCallback = (position) => {\n        console.log(position)\n        var latitude = (position.coords.latitude)\n        this.longitude = (position.coords.longitude)\n    }\n\n    const errorCallback = (error) => {\n        console.error(error)\n    }\n\n    function getCord() {\n        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n    }   \n    getCord()\n\n    const texture_1 = useLoader(TextureLoader, \"https://api.mapbox.com/styles/v1/toastedbread48/cl839iz82007c14n55lu6gp4y/static/\" + latitude + \",\" + this.longitude + \",10/1280x1280?access_token=pk.eyJ1IjoidG9hc3RlZGJyZWFkNDgiLCJhIjoiY2w4Mzh2aXE3MDNqODN3cDZ0b2NvN2FtZiJ9.ECoocvTOOyxsaOV-BSBYUg\")\n    const mesh = useRef()\n    useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.003\n    })\n\n    \n\n  return (\n    <mesh ref={mesh} position={[-3, 0, 0]}   scale={1.9}>\n      <sphereGeometry args={[1, 100]}/>\n      <meshStandardMaterial map={texture_1} attach=\"material\" />\n    </mesh>\n  )\n}\n\nexport default function Klode() {\n  return (\n    <Canvas style={{height: \"100vh\", width: \"100vw\"}}>\n      <ambientLight intensity={0.06} />\n      <spotLight position={[-10, 1, 30]} angle={0.15} penumbra={1} />\n      {/* <pointLight position={[-10, -10, -10]} /> */}\n      <Suspense fallback={null}>\n        <Stars radius={20} depth={50} count={5000} factor={5} saturation={0} fade speed={3}/>\n        <Earth/>\n      </Suspense>\n    </Canvas>\n  )\n}\n\n\n\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,oBAA5C;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,KAAT,QAAsB,mBAAtB;;;AAGA,SAASC,KAAT,GAAiB;EAAA;;EAEb,MAAMC,eAAe,GAAIC,QAAD,IAAc;IAClCC,OAAO,CAACC,GAAR,CAAYF,QAAZ;IACA,IAAIG,QAAQ,GAAIH,QAAQ,CAACI,MAAT,CAAgBD,QAAhC;IACA,KAAKE,SAAL,GAAkBL,QAAQ,CAACI,MAAT,CAAgBC,SAAlC;EACH,CAJD;;EAMA,MAAMC,aAAa,GAAIC,KAAD,IAAW;IAC7BN,OAAO,CAACM,KAAR,CAAcA,KAAd;EACH,CAFD;;EAIA,SAASC,OAAT,GAAmB;IACfC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCZ,eAAzC,EAA0DO,aAA1D;EACH;;EACDE,OAAO;EAEP,MAAMI,SAAS,GAAGjB,SAAS,CAACC,aAAD,EAAgB,sFAAsFO,QAAtF,GAAiG,GAAjG,GAAuG,KAAKE,SAA5G,GAAwH,+HAAxI,CAA3B;EACA,MAAMQ,IAAI,GAAGtB,MAAM,EAAnB;EACAG,QAAQ,CAAC,MAAM;IACfmB,IAAI,CAACC,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,GAA0BH,IAAI,CAACC,OAAL,CAAaC,QAAb,CAAsBE,CAAtB,IAA2B,KAArD;EACC,CAFO,CAAR;EAMF,oBACE;IAAM,GAAG,EAAEJ,IAAX;IAAiB,QAAQ,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAA3B;IAAyC,KAAK,EAAE,GAAhD;IAAA,wBACE;MAAgB,IAAI,EAAE,CAAC,CAAD,EAAI,GAAJ;IAAtB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAsB,GAAG,EAAED,SAA3B;MAAsC,MAAM,EAAC;IAA7C;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA/BQd,K;UAiBaH,S,EAElBD,Q;;;KAnBKI,K;AAiCT,eAAe,SAASoB,KAAT,GAAiB;EAC9B,oBACE,QAAC,MAAD;IAAQ,KAAK,EAAE;MAACC,MAAM,EAAE,OAAT;MAAkBC,KAAK,EAAE;IAAzB,CAAf;IAAA,wBACE;MAAc,SAAS,EAAE;IAAzB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAW,QAAQ,EAAE,CAAC,CAAC,EAAF,EAAM,CAAN,EAAS,EAAT,CAArB;MAAmC,KAAK,EAAE,IAA1C;MAAgD,QAAQ,EAAE;IAA1D;MAAA;MAAA;MAAA;IAAA,QAFF,eAIE,QAAC,QAAD;MAAU,QAAQ,EAAE,IAApB;MAAA,wBACE,QAAC,KAAD;QAAO,MAAM,EAAE,EAAf;QAAmB,KAAK,EAAE,EAA1B;QAA8B,KAAK,EAAE,IAArC;QAA2C,MAAM,EAAE,CAAnD;QAAsD,UAAU,EAAE,CAAlE;QAAqE,IAAI,MAAzE;QAA0E,KAAK,EAAE;MAAjF;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,KAAD;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;MAZuBF,K"},"metadata":{},"sourceType":"module"}