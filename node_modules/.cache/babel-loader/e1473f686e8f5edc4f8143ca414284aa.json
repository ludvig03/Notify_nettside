{"ast":null,"code":"import _slicedToArray from\"/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import ThreeGlobe from 'three-globe';\n// import * as THREE from 'three';\n// import { react, useState, Suspense } from \"react\"\n// import { Canvas, useLoader } from \"@react-three/fiber\"\n// import Earth from \"./Earth.js\"  \n// import ReactDOM from 'react-dom'\n// import { TextureLoader } from 'three/src/loaders/TextureLoader'\n// import { useTexture } from \"@react-three/drei\"\n// export default function Klode() {\n//     const texture_6 = useLoader(TextureLoader, 'texture.jpeg')\n//     return (\n//         <div>\n//             <Canvas style={{height: \"100vh\", width: \"100vw\"}}>\n//                 <Suspense fallback={null}>\n//                     <ambientLight intensity={0.5} />\n//                     <directionalLight color=\"white\" position={[0, 0, 3]} />\n//                     <Stars radius={20} depth={50} count={5000} factor={5} saturation={0} fade speed={3}/>\n//                     <mesh position={[-3, 0, 0]}>\n//                         <sphereGeometry/>\n//                         <meshStandardMaterial map={texture_6}/>\n//                     </mesh>\n//                 </Suspense>\n//             </Canvas>   \n//             <div className=\"canvas-placeholder\"></div>\n//         </div>\n//     )\nimport React,{useRef,Suspense}from'react';import{Canvas,useFrame,useLoader}from'@react-three/fiber';import{TextureLoader}from'three/src/loaders/TextureLoader.js';import{Stars}from\"@react-three/drei\";import{OrbitControls}from'@react-three/drei';import{Html,useProgress}from'@react-three/drei';import*as THREE from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Earth(){// const successCallback = (position) => {\n//     console.log(position)\n//     const latitude = (position.coords.latitude).toString()\n//     const longitude = (position.coords.longitude).toString()\n// }\n// const errorCallback = (error) => {\n//     console.error(error)\n// }\n// function getCord() {\n//     navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n// }   \n// getCord()\n// navigator.geolocation.getCurrentPosition(position => {let lat = position.coords.longitude; let lng = position.coords.latitude;});\nfunction main(){if(navigator.geolocation){navigator.geolocation.getCurrentPosition(showPosition);}}function showPosition(position){console.log(position.coords.latitude);console.log(position.coords.longitude);}main();var _useLoader=useLoader(TextureLoader,['./earthmap.jpg','./earth_displace.jpg',\"./earth_normalmap.webp\",\"./earth_rough.webp\",\"./earthcloudmap.jpg\",\"./earthcloudmaptrans.jpg\"]),_useLoader2=_slicedToArray(_useLoader,6),colorMap=_useLoader2[0],displacementMap=_useLoader2[1],normalMap=_useLoader2[2],roughnessMap=_useLoader2[3],skyMap=_useLoader2[4],earthcloudmaptrans=_useLoader2[5];// const texture_1 = useLoader(TextureLoader, \"\")\nvar mesh=useRef();useFrame(function(){mesh.current.rotation.x=mesh.current.rotation.y+=0.002;});// const mesh2 = useRef()\n// useFrame(() => {\n//   mesh2.current.rotation.x = mesh2.current.rotation.y += 0.002\n// })\n// function Loader() {\n//   const { progress } = useProgress()\n//   return (\n//     <Html center>{progress} % loaded</Html>\n//   )\n// }\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"mesh\",{ref:mesh,position:[0,0,0],scale:1.9,children:[/*#__PURE__*/_jsx(\"sphereGeometry\",{args:[1,100,1000]}),/*#__PURE__*/_jsx(\"meshStandardMaterial\",{map:colorMap,displacementMap:displacementMap,normalMap:normalMap,roughnessMap:roughnessMap,displacementScale:0.03,attach:\"material\"}),/*#__PURE__*/_jsx(OrbitControls,{enableZoom:false,enablePan:true,enableRotate:true,panSpeed:0.5,rotateSpeed:0.5})]})});}export default function Klode(){return/*#__PURE__*/_jsxs(Canvas,{style:{height:\"100vh\",width:\"100vh\"},children:[/*#__PURE__*/_jsx(\"ambientLight\",{intensity:0.2,color:\"bbbbb\"}),/*#__PURE__*/_jsx(\"directionalLight\",{position:[-10,10,30],angle:0.15,penumbra:1,intensity:0.6}),/*#__PURE__*/_jsx(Suspense,{fallback:null,children:/*#__PURE__*/_jsx(Earth,{})})]});}","map":{"version":3,"names":["React","useRef","Suspense","Canvas","useFrame","useLoader","TextureLoader","Stars","OrbitControls","Html","useProgress","THREE","Earth","main","navigator","geolocation","getCurrentPosition","showPosition","position","console","log","coords","latitude","longitude","colorMap","displacementMap","normalMap","roughnessMap","skyMap","earthcloudmaptrans","mesh","current","rotation","x","y","Klode","height","width"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/src/components/Klode.jsx"],"sourcesContent":["// import ThreeGlobe from 'three-globe';\n// import * as THREE from 'three';\n// import { react, useState, Suspense } from \"react\"\n// import { Canvas, useLoader } from \"@react-three/fiber\"\n// import Earth from \"./Earth.js\"  \n// import ReactDOM from 'react-dom'\n// import { TextureLoader } from 'three/src/loaders/TextureLoader'\n// import { useTexture } from \"@react-three/drei\"\n\n\n\n// export default function Klode() {\n//     const texture_6 = useLoader(TextureLoader, 'texture.jpeg')\n\n//     return (\n        \n//         <div>\n//             <Canvas style={{height: \"100vh\", width: \"100vw\"}}>\n//                 <Suspense fallback={null}>\n//                     <ambientLight intensity={0.5} />\n//                     <directionalLight color=\"white\" position={[0, 0, 3]} />\n//                     <Stars radius={20} depth={50} count={5000} factor={5} saturation={0} fade speed={3}/>\n//                     <mesh position={[-3, 0, 0]}>\n//                         <sphereGeometry/>\n//                         <meshStandardMaterial map={texture_6}/>\n//                     </mesh>\n//                 </Suspense>\n//             </Canvas>   \n//             <div className=\"canvas-placeholder\"></div>\n//         </div>\n//     )\n\nimport React, { useRef, Suspense } from 'react'\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js'\nimport { Stars } from \"@react-three/drei\"\nimport { OrbitControls } from '@react-three/drei'\nimport { Html, useProgress } from '@react-three/drei'\nimport * as THREE from \"three\"\n\n\n\nfunction Earth() {\n\n\n\n    // const successCallback = (position) => {\n    //     console.log(position)\n    //     const latitude = (position.coords.latitude).toString()\n    //     const longitude = (position.coords.longitude).toString()\n    // }\n\n    // const errorCallback = (error) => {\n    //     console.error(error)\n    // }\n\n    // function getCord() {\n    //     navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n    // }   \n    // getCord()\n\n\n    // navigator.geolocation.getCurrentPosition(position => {let lat = position.coords.longitude; let lng = position.coords.latitude;});\n    \n    function main() {\n      if (navigator.geolocation){\n        navigator.geolocation.getCurrentPosition(showPosition)\n      }\n    }\n\n    function showPosition(position){\n      console.log(position.coords.latitude)\n      console.log(position.coords.longitude)\n    }\n\n    main()\n    const [colorMap, displacementMap, normalMap, roughnessMap, skyMap, earthcloudmaptrans] = useLoader(TextureLoader, [\n      './earthmap.jpg',\n      './earth_displace.jpg',\n      \"./earth_normalmap.webp\",\n      \"./earth_rough.webp\",\n      \"./earthcloudmap.jpg\",\n      \"./earthcloudmaptrans.jpg\",\n    ])\n    \n    // const texture_1 = useLoader(TextureLoader, \"\")\n    const mesh = useRef()\n    useFrame(() => {\n      mesh.current.rotation.x = mesh.current.rotation.y += 0.002\n    })\n\n    // const mesh2 = useRef()\n    // useFrame(() => {\n    //   mesh2.current.rotation.x = mesh2.current.rotation.y += 0.002\n    // })\n\n\n    // function Loader() {\n    //   const { progress } = useProgress()\n    //   return (\n    //     <Html center>{progress} % loaded</Html>\n    //   )\n    // }\n\n    \n\n  return (\n    <>\n      <mesh ref={mesh} position={[0, 0, 0]} scale={1.9}>\n        <sphereGeometry args={[1, 100, 1000]}/>\n        <meshStandardMaterial map={colorMap} displacementMap={displacementMap} normalMap={normalMap} roughnessMap={roughnessMap} displacementScale={0.03} attach=\"material\" />\n        <OrbitControls enableZoom={false} enablePan={true} enableRotate={true} panSpeed={0.5} rotateSpeed={0.5}/>\n      </mesh>\n      {/* <mesh ref={mesh2} position={[0, 0, 0]} scale={1.9}>\n        <sphereGeometry args={[1.05, 32, 32]}/>\n        <meshPhongMaterial map={earthcloudmaptrans} depthWrite={true} opacity={0.7} transparent={true} side={THREE.DoubleSide}/>\n      </mesh> */}\n    </>\n  )\n}\n\nexport default function Klode() {\n  return (\n    <Canvas style={{height: \"100vh\", width: \"100vh\"} }>\n      <ambientLight intensity={0.2} color={\"bbbbb\"}/>\n      <directionalLight position={[-10, 10, 30]} angle={0.15} penumbra={1} intensity={0.6}/>\n      {/* <pointLight position={[-10, -10, -10]} /> */}\n      <Suspense fallback={null}>\n        {/* <Stars radius={10} depth={50} count={8000} factor={3} saturation={1} fadeSpeed={3}/> */}\n        <Earth/>\n      </Suspense>\n    </Canvas>\n  )\n}\n\n"],"mappings":"yJAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAOA,MAAP,EAAgBC,MAAhB,CAAwBC,QAAxB,KAAwC,OAAxC,CACA,OAASC,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,oBAA5C,CACA,OAASC,aAAT,KAA8B,oCAA9B,CACA,OAASC,KAAT,KAAsB,mBAAtB,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,IAAT,CAAeC,WAAf,KAAkC,mBAAlC,CACA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,C,6IAIA,QAASC,MAAT,EAAiB,CAIb;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA,QAASC,KAAT,EAAgB,CACd,GAAIC,SAAS,CAACC,WAAd,CAA0B,CACxBD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,YAAzC,EACD,CACF,CAED,QAASA,aAAT,CAAsBC,QAAtB,CAA+B,CAC7BC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAAT,CAAgBC,QAA5B,EACAH,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAAT,CAAgBE,SAA5B,EACD,CAEDV,IAAI,GACJ,eAAyFR,SAAS,CAACC,aAAD,CAAgB,CAChH,gBADgH,CAEhH,sBAFgH,CAGhH,wBAHgH,CAIhH,oBAJgH,CAKhH,qBALgH,CAMhH,0BANgH,CAAhB,CAAlG,0CAAOkB,QAAP,gBAAiBC,eAAjB,gBAAkCC,SAAlC,gBAA6CC,YAA7C,gBAA2DC,MAA3D,gBAAmEC,kBAAnE,gBASA;AACA,GAAMC,KAAI,CAAG7B,MAAM,EAAnB,CACAG,QAAQ,CAAC,UAAM,CACb0B,IAAI,CAACC,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,CAA0BH,IAAI,CAACC,OAAL,CAAaC,QAAb,CAAsBE,CAAtB,EAA2B,KAArD,CACD,CAFO,CAAR,CAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIF,mBACE,sCACE,cAAM,GAAG,CAAEJ,IAAX,CAAiB,QAAQ,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAA3B,CAAsC,KAAK,CAAE,GAA7C,wBACE,uBAAgB,IAAI,CAAE,CAAC,CAAD,CAAI,GAAJ,CAAS,IAAT,CAAtB,EADF,cAEE,6BAAsB,GAAG,CAAEN,QAA3B,CAAqC,eAAe,CAAEC,eAAtD,CAAuE,SAAS,CAAEC,SAAlF,CAA6F,YAAY,CAAEC,YAA3G,CAAyH,iBAAiB,CAAE,IAA5I,CAAkJ,MAAM,CAAC,UAAzJ,EAFF,cAGE,KAAC,aAAD,EAAe,UAAU,CAAE,KAA3B,CAAkC,SAAS,CAAE,IAA7C,CAAmD,YAAY,CAAE,IAAjE,CAAuE,QAAQ,CAAE,GAAjF,CAAsF,WAAW,CAAE,GAAnG,EAHF,GADF,EADF,CAaD,CAED,cAAe,SAASQ,MAAT,EAAiB,CAC9B,mBACE,MAAC,MAAD,EAAQ,KAAK,CAAE,CAACC,MAAM,CAAE,OAAT,CAAkBC,KAAK,CAAE,OAAzB,CAAf,wBACE,qBAAc,SAAS,CAAE,GAAzB,CAA8B,KAAK,CAAE,OAArC,EADF,cAEE,yBAAkB,QAAQ,CAAE,CAAC,CAAC,EAAF,CAAM,EAAN,CAAU,EAAV,CAA5B,CAA2C,KAAK,CAAE,IAAlD,CAAwD,QAAQ,CAAE,CAAlE,CAAqE,SAAS,CAAE,GAAhF,EAFF,cAIE,KAAC,QAAD,EAAU,QAAQ,CAAE,IAApB,uBAEE,KAAC,KAAD,IAFF,EAJF,GADF,CAWD"},"metadata":{},"sourceType":"module"}