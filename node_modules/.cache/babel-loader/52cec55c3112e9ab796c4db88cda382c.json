{"ast":null,"code":"var _jsxFileName = \"/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/src/components/Earth.js\";\n// import React, { useRef } from \"react\"\n// import { useGLTF } from \"@react-three/drei\"\n// export default function Model({}) {\n//     const { nodes, materials} = useGLTF(\"/earth.gltf\")\n//     return (\n//         <group scale={1.5} dispose={null}>\n//             <group scale={1.13}>\n//                 <mesh geometry={nodes.Object_4.geometry} material={materials[\"scene_-_Root\"]}>\n//                 </mesh>\n//             </group>\n//         </group>\n//     )\n// }\n// useGLTF.preload(\"/earth.gltf\")\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ThreeScene extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene(); //Add Renderer\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //add Camera\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5; //Camera Controls\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement); //LIGHTS\n\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]); //Simple Box with WireFrame\n\n    this.addModels();\n    this.renderScene(); //start animation\n\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube); // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n\n    new THREE.TextureLoader().load(\"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\", texture => {\n      //Update Texture\n      this.cube.material.map = texture;\n      this.cube.material.needsUpdate = true;\n    }, xhr => {\n      //Download Progress\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    }, error => {\n      //Error CallBack\n      console.log(\"An error happened\" + error);\n    }); // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      },\n      ref: mount => {\n        this.mount = mount;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeScene;","map":{"version":3,"names":["React","Component","THREE","MTLLoader","OBJLoader","OrbitControls","ThreeScene","componentDidMount","width","mount","clientWidth","height","clientHeight","scene","Scene","renderer","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","camera","PerspectiveCamera","position","z","y","controls","lights","PointLight","set","add","addModels","renderScene","start","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","TextureLoader","load","texture","map","needsUpdate","xhr","console","log","loaded","total","error","render"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/src/components/Earth.js"],"sourcesContent":["\n// import React, { useRef } from \"react\"\n// import { useGLTF } from \"@react-three/drei\"\n\n// export default function Model({}) {\n//     const { nodes, materials} = useGLTF(\"/earth.gltf\")\n//     return (\n//         <group scale={1.5} dispose={null}>\n//             <group scale={1.13}>\n//                 <mesh geometry={nodes.Object_4.geometry} material={materials[\"scene_-_Root\"]}>\n//                 </mesh>\n//             </group>\n//         </group>\n//     )\n// }\n\n// useGLTF.preload(\"/earth.gltf\")\n\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nclass ThreeScene extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#263238\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5;\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    //LIGHTS\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    //Simple Box with WireFrame\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#0F0\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n    new THREE.TextureLoader().load(\n      \"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n      texture => {\n        //Update Texture\n        this.cube.material.map = texture;\n        this.cube.material.needsUpdate = true;\n      },\n      xhr => {\n        //Download Progress\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      error => {\n        //Error CallBack\n        console.log(\"An error happened\" + error);\n      }\n    );\n\n    // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeScene;"],"mappings":"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"},"metadata":{},"sourceType":"module"}