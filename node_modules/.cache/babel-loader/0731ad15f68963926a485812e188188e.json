{"ast":null,"code":"import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\nexport function geoVoronoi(data) {\n  const v = function (data) {\n    v.delaunay = null;\n    v._data = data;\n\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n\n    if (typeof v._data === \"object\") {\n      const temp = v._data.map(d => [v._vx(d), v._vy(d), d]).filter(d => isFinite(d[0] + d[1]));\n\n      v.points = temp.map(d => [d[0], d[1]]);\n      v.valid = temp.map(d => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n\n    return v;\n  };\n\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n\n    if (0 in d) return d[0];\n  };\n\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n\n    if (1 in d) return d[1];\n  };\n\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) => coll.features.push({\n      type: \"Feature\",\n      geometry: !poly ? null : {\n        type: \"Polygon\",\n        coordinates: [[...poly, poly[0]].map(i => v.delaunay.centers[i])]\n      },\n      properties: {\n        site: v.valid[i],\n        sitecoordinates: v.points[i],\n        neighbours: v.delaunay.neighbors[i] // not part of the public API\n\n      }\n    }));\n    if (v.valid.length === 1) coll.features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Sphere\"\n      },\n      properties: {\n        site: v.valid[0],\n        sitecoordinates: v.points[0],\n        neighbours: []\n      }\n    });\n    return coll;\n  };\n\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles.map((tri, index) => {\n        tri = tri.map(i => v.points[i]);\n        tri.center = v.delaunay.centers[index];\n        return tri;\n      }).filter(tri => excess(tri) > 0).map(tri => ({\n        type: \"Feature\",\n        properties: {\n          circumcenter: tri.center\n        },\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [[...tri, tri[0]]]\n        }\n      }))\n    };\n  };\n\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n\n    const _distances = v.delaunay.edges.map(e => geoDistance(v.points[e[0]], v.points[e[1]])),\n          _urquart = v.delaunay.urquhart(_distances);\n\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i]\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]]\n        }\n      }))\n    };\n  };\n\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map(e => [v.points[e[0]], v.points[e[1]]])\n    };\n  };\n\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    const {\n      centers,\n      polygons\n    } = v.delaunay;\n    const coordinates = [];\n\n    for (const p of polygons) {\n      if (!p) continue;\n\n      for (let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0; i < n; p0 = p1, p1 = p[++i]) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n\n    return {\n      type: \"MultiLineString\",\n      coordinates\n    };\n  };\n\n  v._found = undefined;\n\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius) return v._found;\n  };\n\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    const hull = v.delaunay.hull,\n          points = v.points;\n    return hull.length === 0 ? null : {\n      type: \"Polygon\",\n      coordinates: [[...hull.map(i => points[i]), points[hull[0]]]]\n    };\n  };\n\n  return data ? v(data) : v;\n}","map":{"version":3,"names":["geoCentroid","geoDistance","geoDelaunay","excess","geoVoronoi","data","v","delaunay","_data","type","features","temp","map","d","_vx","_vy","filter","isFinite","points","valid","x","f","y","polygons","undefined","coll","length","forEach","poly","i","push","geometry","coordinates","centers","properties","site","sitecoordinates","neighbours","neighbors","triangles","tri","index","center","circumcenter","links","_distances","edges","e","_urquart","urquhart","source","target","mesh","cellMesh","p","n","p0","p1","_found","find","radius","hull"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/node_modules/d3-geo-voronoi/src/voronoi.js"],"sourcesContent":["import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\n\nexport function geoVoronoi(data) {\n  const v = function(data) {\n    v.delaunay = null;\n    v._data = data;\n\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      const temp = v._data\n        .map(d => [v._vx(d), v._vy(d), d])\n        .filter(d => isFinite(d[0] + d[1]));\n      v.points = temp.map(d => [d[0], d[1]]);\n      v.valid = temp.map(d => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n\n  v._vx = function(d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function(d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n\n  v.x = function(f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function(f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n\n  v.polygons = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) =>\n      coll.features.push({\n        type: \"Feature\",\n        geometry: !poly\n          ? null\n          : {\n              type: \"Polygon\",\n              coordinates: [[...poly, poly[0]].map(i => v.delaunay.centers[i])]\n            },\n        properties: {\n          site: v.valid[i],\n          sitecoordinates: v.points[i],\n          neighbours: v.delaunay.neighbors[i] // not part of the public API\n        }\n      })\n    );\n    if (v.valid.length === 1)\n      coll.features.push({\n        type: \"Feature\",\n        geometry: { type: \"Sphere\" },\n        properties: {\n          site: v.valid[0],\n          sitecoordinates: v.points[0],\n          neighbours: []\n        }\n      });\n    return coll;\n  };\n\n  v.triangles = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles\n        .map((tri, index) => {\n          tri = tri.map(i => v.points[i]);\n          tri.center = v.delaunay.centers[index];\n          return tri;\n        })\n        .filter(tri => excess(tri) > 0)\n        .map(tri => ({\n          type: \"Feature\",\n          properties: {\n            circumcenter: tri.center\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [[...tri, tri[0]]]\n          }\n        }))\n    };\n  };\n\n  v.links = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const _distances = v.delaunay.edges.map(e =>\n        geoDistance(v.points[e[0]], v.points[e[1]])\n      ),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i]\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]]\n        }\n      }))\n    };\n  };\n\n  v.mesh = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map(e => [v.points[e[0]], v.points[e[1]]])\n    };\n  };\n\n  v.cellMesh = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const { centers, polygons } = v.delaunay;\n    const coordinates = [];\n    for (const p of polygons) {\n      if (!p) continue;\n      for (\n        let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0;\n        i < n;\n        p0 = p1, p1 = p[++i]\n      ) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates\n    };\n  };\n\n  v._found = undefined;\n  v.find = function(x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius)\n      return v._found;\n  };\n\n  v.hull = function(data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    const hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0\n      ? null\n      : {\n          type: \"Polygon\",\n          coordinates: [[...hull.map(i => points[i]), points[hull[0]]]]\n        };\n  };\n\n  return data ? v(data) : v;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}