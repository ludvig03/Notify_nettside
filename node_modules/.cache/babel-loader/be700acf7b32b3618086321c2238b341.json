{"ast":null,"code":"import { Delaunay } from \"d3-delaunay\";\nimport { geoRotation, geoStereographic } from \"d3-geo\";\nimport { extent } from \"d3-array\";\nimport { asin, atan2, cos, degrees, max, min, radians, sign, sin, sqrt } from \"./math.js\";\nimport { cartesianNormalize as normalize, cartesianCross as cross, cartesianDot as dot, cartesianAdd } from \"./cartesian.js\"; // Converts 3D Cartesian to spherical coordinates (degrees).\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];\n} // Converts spherical coordinates (degrees) to 3D Cartesian.\n\n\nfunction cartesian(coordinates) {\n  const lambda = coordinates[0] * radians,\n        phi = coordinates[1] * radians,\n        cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n} // Spherical excess of a triangle (in spherical coordinates)\n\n\nexport function excess(triangle) {\n  triangle = triangle.map(p => cartesian(p));\n  return dot(triangle[0], cross(triangle[2], triangle[1]));\n}\nexport function geoDelaunay(points) {\n  const delaunay = geo_delaunay_from(points),\n        triangles = geo_triangles(delaunay),\n        edges = geo_edges(triangles, points),\n        neighbors = geo_neighbors(triangles, points.length),\n        find = geo_find(neighbors, points),\n        // Voronoi ; could take a center function as an argument\n  circumcenters = geo_circumcenters(triangles, points),\n        {\n    polygons,\n    centers\n  } = geo_polygons(circumcenters, triangles, points),\n        mesh = geo_mesh(polygons),\n        hull = geo_hull(triangles, points),\n        // Urquhart ; returns a function that takes a distance array as argument.\n  urquhart = geo_urquhart(edges, triangles);\n  return {\n    delaunay,\n    edges,\n    triangles,\n    centers,\n    neighbors,\n    polygons,\n    mesh,\n    hull,\n    urquhart,\n    find\n  };\n}\n\nfunction geo_find(neighbors, points) {\n  function distance2(a, b) {\n    let x = a[0] - b[0],\n        y = a[1] - b[1],\n        z = a[2] - b[2];\n    return x * x + y * y + z * z;\n  }\n\n  return function find(x, y, next) {\n    if (next === undefined) next = 0;\n    let cell,\n        dist,\n        found = next;\n    const xyz = cartesian([x, y]);\n\n    do {\n      cell = next;\n      next = null;\n      dist = distance2(xyz, cartesian(points[cell]));\n      neighbors[cell].forEach(i => {\n        let ndist = distance2(xyz, cartesian(points[i]));\n\n        if (ndist < dist) {\n          dist = ndist;\n          next = i;\n          found = i;\n          return;\n        }\n      });\n    } while (next !== null);\n\n    return found;\n  };\n}\n\nfunction geo_delaunay_from(points) {\n  if (points.length < 2) return {}; // find a valid point to send to infinity\n\n  let pivot = 0;\n\n  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length);\n\n  const r = geoRotation(points[pivot]),\n        projection = geoStereographic().translate([0, 0]).scale(1).rotate(r.invert([180, 0]));\n  points = points.map(projection);\n  const zeros = [];\n  let max2 = 1;\n\n  for (let i = 0, n = points.length; i < n; i++) {\n    let m = points[i][0] ** 2 + points[i][1] ** 2;\n    if (!isFinite(m) || m > 1e32) zeros.push(i);else if (m > max2) max2 = m;\n  }\n\n  const FAR = 1e6 * sqrt(max2);\n  zeros.forEach(i => points[i] = [FAR, 0]); // Add infinite horizon points\n\n  points.push([0, FAR]);\n  points.push([-FAR, 0]);\n  points.push([0, -FAR]);\n  const delaunay = Delaunay.from(points);\n  delaunay.projection = projection; // clean up the triangulation\n\n  const {\n    triangles,\n    halfedges,\n    inedges\n  } = delaunay;\n  const degenerate = [];\n\n  for (let i = 0, l = halfedges.length; i < l; i++) {\n    if (halfedges[i] < 0) {\n      const j = i % 3 == 2 ? i - 2 : i + 1;\n      const k = i % 3 == 0 ? i + 2 : i - 1;\n      const a = halfedges[j];\n      const b = halfedges[k];\n      halfedges[a] = b;\n      halfedges[b] = a;\n      halfedges[j] = halfedges[k] = -1;\n      triangles[i] = triangles[j] = triangles[k] = pivot;\n      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n      degenerate.push(Math.min(i, j, k));\n      i += 2 - i % 3;\n    } else if (triangles[i] > points.length - 3 - 1) {\n      triangles[i] = pivot;\n    }\n  } // there should always be 4 degenerate triangles\n  // console.warn(degenerate);\n\n\n  return delaunay;\n}\n\nfunction geo_edges(triangles, points) {\n  const _index = new Set();\n\n  if (points.length === 2) return [[0, 1]];\n  triangles.forEach(tri => {\n    if (tri[0] === tri[1]) return;\n    if (excess(tri.map(i => points[i])) < 0) return;\n\n    for (let i = 0, j; i < 3; i++) {\n      j = (i + 1) % 3;\n\n      _index.add(extent([tri[i], tri[j]]).join(\"-\"));\n    }\n  });\n  return Array.from(_index, d => d.split(\"-\").map(Number));\n}\n\nfunction geo_triangles(delaunay) {\n  const {\n    triangles\n  } = delaunay;\n  if (!triangles) return [];\n  const geo_triangles = [];\n\n  for (let i = 0, n = triangles.length / 3; i < n; i++) {\n    const a = triangles[3 * i],\n          b = triangles[3 * i + 1],\n          c = triangles[3 * i + 2];\n\n    if (a !== b && b !== c) {\n      geo_triangles.push([a, c, b]);\n    }\n  }\n\n  return geo_triangles;\n}\n\nfunction geo_circumcenters(triangles, points) {\n  // if (!use_centroids) {\n  return triangles.map(tri => {\n    const c = tri.map(i => points[i]).map(cartesian),\n          V = cartesianAdd(cartesianAdd(cross(c[1], c[0]), cross(c[2], c[1])), cross(c[0], c[2]));\n    return spherical(normalize(V));\n  });\n  /*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/\n}\n\nfunction geo_neighbors(triangles, npoints) {\n  const neighbors = [];\n  triangles.forEach(tri => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n            b = tri[(j + 1) % 3];\n      neighbors[a] = neighbors[a] || [];\n      neighbors[a].push(b);\n    }\n  }); // degenerate cases\n\n  if (triangles.length === 0) {\n    if (npoints === 2) neighbors[0] = [1], neighbors[1] = [0];else if (npoints === 1) neighbors[0] = [];\n  }\n\n  return neighbors;\n}\n\nfunction geo_polygons(circumcenters, triangles, points) {\n  const polygons = [];\n  const centers = circumcenters.slice();\n\n  if (triangles.length === 0) {\n    if (points.length < 2) return {\n      polygons,\n      centers\n    };\n\n    if (points.length === 2) {\n      // two hemispheres\n      const a = cartesian(points[0]),\n            b = cartesian(points[1]),\n            m = normalize(cartesianAdd(a, b)),\n            d = normalize(cross(a, b)),\n            c = cross(m, d);\n      const poly = [m, cross(m, c), cross(cross(m, c), c), cross(cross(cross(m, c), c), c)].map(spherical).map(supplement);\n      return polygons.push(poly), polygons.push(poly.slice().reverse()), {\n        polygons,\n        centers\n      };\n    }\n  }\n\n  triangles.forEach((tri, t) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n            b = tri[(j + 1) % 3],\n            c = tri[(j + 2) % 3];\n      polygons[a] = polygons[a] || [];\n      polygons[a].push([b, c, t, [a, b, c]]);\n    }\n  }); // reorder each polygon\n\n  const reordered = polygons.map(poly => {\n    const p = [poly[0][2]]; // t\n\n    let k = poly[0][1]; // k = c\n\n    for (let i = 1; i < poly.length; i++) {\n      // look for b = k\n      for (let j = 0; j < poly.length; j++) {\n        if (poly[j][0] == k) {\n          k = poly[j][1];\n          p.push(poly[j][2]);\n          break;\n        }\n      }\n    }\n\n    if (p.length > 2) {\n      return p;\n    } else if (p.length == 2) {\n      const R0 = o_midpoint(points[poly[0][3][0]], points[poly[0][3][1]], centers[p[0]]),\n            R1 = o_midpoint(points[poly[0][3][2]], points[poly[0][3][0]], centers[p[0]]);\n      const i0 = supplement(R0),\n            i1 = supplement(R1);\n      return [p[0], i1, p[1], i0];\n    }\n  });\n\n  function supplement(point) {\n    let f = -1;\n    centers.slice(triangles.length, Infinity).forEach((p, i) => {\n      if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n    });\n    if (f < 0) f = centers.length, centers.push(point);\n    return f;\n  }\n\n  return {\n    polygons: reordered,\n    centers\n  };\n}\n\nfunction o_midpoint(a, b, c) {\n  a = cartesian(a);\n  b = cartesian(b);\n  c = cartesian(c);\n  const s = sign(dot(cross(b, a), c));\n  return spherical(normalize(cartesianAdd(a, b)).map(d => s * d));\n}\n\nfunction geo_mesh(polygons) {\n  const mesh = [];\n  polygons.forEach(poly => {\n    if (!poly) return;\n    let p = poly[poly.length - 1];\n\n    for (let q of poly) {\n      if (q > p) mesh.push([p, q]);\n      p = q;\n    }\n  });\n  return mesh;\n}\n\nfunction geo_urquhart(edges, triangles) {\n  return function (distances) {\n    const _lengths = new Map(),\n          _urquhart = new Map();\n\n    edges.forEach((edge, i) => {\n      const u = edge.join(\"-\");\n\n      _lengths.set(u, distances[i]);\n\n      _urquhart.set(u, true);\n    });\n    triangles.forEach(tri => {\n      let l = 0,\n          remove = -1;\n\n      for (let j = 0; j < 3; j++) {\n        let u = extent([tri[j], tri[(j + 1) % 3]]).join(\"-\");\n\n        if (_lengths.get(u) > l) {\n          l = _lengths.get(u);\n          remove = u;\n        }\n      }\n\n      _urquhart.set(remove, false);\n    });\n    return edges.map(edge => _urquhart.get(edge.join(\"-\")));\n  };\n}\n\nfunction geo_hull(triangles, points) {\n  const _hull = new Set(),\n        hull = [];\n\n  triangles.map(tri => {\n    if (excess(tri.map(i => points[i > points.length ? 0 : i])) > 1e-12) return;\n\n    for (let i = 0; i < 3; i++) {\n      let e = [tri[i], tri[(i + 1) % 3]],\n          code = `${e[0]}-${e[1]}`;\n      if (_hull.has(code)) _hull.delete(code);else _hull.add(`${e[1]}-${e[0]}`);\n    }\n  });\n\n  const _index = new Map();\n\n  let start;\n\n  _hull.forEach(e => {\n    e = e.split(\"-\").map(Number);\n\n    _index.set(e[0], e[1]);\n\n    start = e[0];\n  });\n\n  if (start === undefined) return hull;\n  let next = start;\n\n  do {\n    hull.push(next);\n\n    let n = _index.get(next);\n\n    _index.set(next, -1);\n\n    next = n;\n  } while (next > -1 && next !== start);\n\n  return hull;\n}","map":{"version":3,"names":["Delaunay","geoRotation","geoStereographic","extent","asin","atan2","cos","degrees","max","min","radians","sign","sin","sqrt","cartesianNormalize","normalize","cartesianCross","cross","cartesianDot","dot","cartesianAdd","spherical","cartesian","coordinates","lambda","phi","cosphi","excess","triangle","map","p","geoDelaunay","points","delaunay","geo_delaunay_from","triangles","geo_triangles","edges","geo_edges","neighbors","geo_neighbors","length","find","geo_find","circumcenters","geo_circumcenters","polygons","centers","geo_polygons","mesh","geo_mesh","hull","geo_hull","urquhart","geo_urquhart","distance2","a","b","x","y","z","next","undefined","cell","dist","found","xyz","forEach","i","ndist","pivot","isNaN","r","projection","translate","scale","rotate","invert","zeros","max2","n","m","isFinite","push","FAR","from","halfedges","inedges","degenerate","l","j","k","Math","_index","Set","tri","add","join","Array","d","split","Number","c","V","npoints","slice","poly","supplement","reverse","t","reordered","R0","o_midpoint","R1","i0","i1","point","f","Infinity","s","q","distances","_lengths","Map","_urquhart","edge","u","set","remove","get","_hull","e","code","has","delete","start"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/node_modules/d3-geo-voronoi/src/delaunay.js"],"sourcesContent":["import { Delaunay } from \"d3-delaunay\";\nimport { geoRotation, geoStereographic } from \"d3-geo\";\nimport { extent } from \"d3-array\";\nimport {\n  asin,\n  atan2,\n  cos,\n  degrees,\n  max,\n  min,\n  radians,\n  sign,\n  sin,\n  sqrt\n} from \"./math.js\";\nimport {\n  cartesianNormalize as normalize,\n  cartesianCross as cross,\n  cartesianDot as dot,\n  cartesianAdd\n} from \"./cartesian.js\";\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  const lambda = coordinates[0] * radians,\n    phi = coordinates[1] * radians,\n    cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}\n\n// Spherical excess of a triangle (in spherical coordinates)\nexport function excess(triangle) {\n  triangle = triangle.map(p => cartesian(p));\n  return dot(triangle[0], cross(triangle[2], triangle[1]));\n}\n\nexport function geoDelaunay(points) {\n  const delaunay = geo_delaunay_from(points),\n    triangles = geo_triangles(delaunay),\n    edges = geo_edges(triangles, points),\n    neighbors = geo_neighbors(triangles, points.length),\n    find = geo_find(neighbors, points),\n    // Voronoi ; could take a center function as an argument\n    circumcenters = geo_circumcenters(triangles, points),\n    { polygons, centers } = geo_polygons(circumcenters, triangles, points),\n    mesh = geo_mesh(polygons),\n    hull = geo_hull(triangles, points),\n    // Urquhart ; returns a function that takes a distance array as argument.\n    urquhart = geo_urquhart(edges, triangles);\n  return {\n    delaunay,\n    edges,\n    triangles,\n    centers,\n    neighbors,\n    polygons,\n    mesh,\n    hull,\n    urquhart,\n    find\n  };\n}\n\nfunction geo_find(neighbors, points) {\n  function distance2(a,b) {\n    let x = a[0] - b[0],\n        y = a[1] - b[1],\n        z = a[2] - b[2];\n    return x * x + y * y + z * z;\n  }\n\n  return function find(x, y, next) {\n    if (next === undefined) next = 0;\n    let cell,\n      dist,\n      found = next;\n    const xyz = cartesian([x, y]);\n    do {\n      cell = next;\n      next = null;\n      dist = distance2(xyz, cartesian(points[cell]));\n      neighbors[cell].forEach(i => {\n        let ndist = distance2(xyz, cartesian(points[i]));\n        if (ndist < dist) {\n          dist = ndist;\n          next = i;\n          found = i;\n          return;\n        }\n      });\n    } while (next !== null);\n\n    return found;\n  };\n}\n\nfunction geo_delaunay_from(points) {\n  if (points.length < 2) return {};\n\n  // find a valid point to send to infinity\n  let pivot = 0;\n  while (isNaN(points[pivot][0]+points[pivot][1]) && pivot++ < points.length);\n\n  const r = geoRotation(points[pivot]),\n    projection = geoStereographic()\n      .translate([0, 0])\n      .scale(1)\n      .rotate(r.invert([180, 0]));\n  points = points.map(projection);\n\n  const zeros = [];\n  let max2 = 1;\n  for (let i = 0, n = points.length; i < n; i++) {\n    let m = points[i][0] ** 2 + points[i][1] ** 2;\n    if (!isFinite(m) || m > 1e32) zeros.push(i);\n    else if (m > max2) max2 = m;\n  }\n\n  const FAR = 1e6 * sqrt(max2);\n\n  zeros.forEach(i => (points[i] = [FAR, 0]));\n\n  // Add infinite horizon points\n  points.push([0,FAR]);\n  points.push([-FAR,0]);\n  points.push([0,-FAR]);\n\n  const delaunay = Delaunay.from(points);\n\n  delaunay.projection = projection;\n\n  // clean up the triangulation\n  const {triangles, halfedges, inedges} = delaunay;\n  const degenerate = [];\n  for (let i = 0, l = halfedges.length; i < l; i++) {\n    if (halfedges[i] < 0) {\n      const j = i % 3 == 2 ? i - 2 : i + 1;\n      const k = i % 3 == 0 ? i + 2 : i - 1;\n      const a = halfedges[j];\n      const b = halfedges[k];\n      halfedges[a] = b;\n      halfedges[b] = a;\n      halfedges[j] = halfedges[k] = -1;\n      triangles[i] = triangles[j] = triangles[k] = pivot;\n      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n      degenerate.push(Math.min(i,j,k));\n      i += 2 - i % 3;\n    } else if (triangles[i] > points.length - 3 - 1) {\n      triangles[i] = pivot;\n    }\n  }\n  \n  // there should always be 4 degenerate triangles\n  // console.warn(degenerate);\n  return delaunay;\n}\n\nfunction geo_edges(triangles, points) {\n  const _index = new Set;\n  if (points.length === 2) return [[0, 1]];\n  triangles.forEach(tri => {\n    if (tri[0] === tri[1]) return;\n    if (excess(tri.map(i => points[i])) < 0) return;\n    for (let i = 0, j; i < 3; i++) {\n      j = (i + 1) % 3;\n      _index.add(extent([tri[i], tri[j]]).join(\"-\"));\n    }\n  });\n  return Array.from(_index, d => d.split(\"-\").map(Number));\n}\n\nfunction geo_triangles(delaunay) {\n  const {triangles} = delaunay;\n  if (!triangles) return [];\n\n  const geo_triangles = [];\n  for (let i = 0, n = triangles.length / 3; i < n; i++) {\n    const a = triangles[3 * i],\n      b = triangles[3 * i + 1],\n      c = triangles[3 * i + 2];\n    if (a !== b && b !== c) {\n      geo_triangles.push([a, c, b]);\n    }\n  }\n  return geo_triangles;\n}\n\nfunction geo_circumcenters(triangles, points) {\n  // if (!use_centroids) {\n  return triangles.map(tri => {\n    const c = tri.map(i => points[i]).map(cartesian),\n      V = cartesianAdd(\n        cartesianAdd(cross(c[1], c[0]), cross(c[2], c[1])),\n        cross(c[0], c[2])\n      );\n    return spherical(normalize(V));\n  });\n  /*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/\n}\n\nfunction geo_neighbors(triangles, npoints) {\n  const neighbors = [];\n  triangles.forEach(tri => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3];\n      neighbors[a] = neighbors[a] || [];\n      neighbors[a].push(b);\n    }\n  });\n\n  // degenerate cases\n  if (triangles.length === 0) {\n    if (npoints === 2) (neighbors[0] = [1]), (neighbors[1] = [0]);\n    else if (npoints === 1) neighbors[0] = [];\n  }\n\n  return neighbors;\n}\n\nfunction geo_polygons(circumcenters, triangles, points) {\n  const polygons = [];\n\n  const centers = circumcenters.slice();\n\n  if (triangles.length === 0) {\n    if (points.length < 2) return { polygons, centers };\n    if (points.length === 2) {\n      // two hemispheres\n      const a = cartesian(points[0]),\n        b = cartesian(points[1]),\n        m = normalize(cartesianAdd(a, b)),\n        d = normalize(cross(a, b)),\n        c = cross(m, d);\n      const poly = [\n        m,\n        cross(m, c),\n        cross(cross(m, c), c),\n        cross(cross(cross(m, c), c), c)\n      ]\n        .map(spherical)\n        .map(supplement);\n      return (\n        polygons.push(poly),\n        polygons.push(poly.slice().reverse()),\n        { polygons, centers }\n      );\n    }\n  }\n\n  triangles.forEach((tri, t) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3],\n        c = tri[(j + 2) % 3];\n      polygons[a] = polygons[a] || [];\n      polygons[a].push([b, c, t, [a, b, c]]);\n    }\n  });\n\n  // reorder each polygon\n  const reordered = polygons.map(poly => {\n    const p = [poly[0][2]]; // t\n    let k = poly[0][1]; // k = c\n    for (let i = 1; i < poly.length; i++) {\n      // look for b = k\n      for (let j = 0; j < poly.length; j++) {\n        if (poly[j][0] == k) {\n          k = poly[j][1];\n          p.push(poly[j][2]);\n          break;\n        }\n      }\n    }\n\n    if (p.length > 2) {\n      return p;\n    } else if (p.length == 2) {\n      const R0 = o_midpoint(\n          points[poly[0][3][0]],\n          points[poly[0][3][1]],\n          centers[p[0]]\n        ),\n        R1 = o_midpoint(\n          points[poly[0][3][2]],\n          points[poly[0][3][0]],\n          centers[p[0]]\n        );\n      const i0 = supplement(R0),\n        i1 = supplement(R1);\n      return [p[0], i1, p[1], i0];\n    }\n  });\n\n  function supplement(point) {\n    let f = -1;\n    centers.slice(triangles.length, Infinity).forEach((p, i) => {\n      if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n    });\n    if (f < 0) (f = centers.length), centers.push(point);\n    return f;\n  }\n\n  return { polygons: reordered, centers };\n}\n\nfunction o_midpoint(a, b, c) {\n  a = cartesian(a);\n  b = cartesian(b);\n  c = cartesian(c);\n  const s = sign(dot(cross(b, a), c));\n  return spherical(normalize(cartesianAdd(a, b)).map(d => s * d));\n}\n\nfunction geo_mesh(polygons) {\n  const mesh = [];\n  polygons.forEach(poly => {\n    if (!poly) return;\n    let p = poly[poly.length - 1];\n    for (let q of poly) {\n      if (q > p) mesh.push([p, q]);\n      p = q;\n    }\n  });\n  return mesh;\n}\n\nfunction geo_urquhart(edges, triangles) {\n  return function(distances) {\n    const _lengths = new Map(),\n      _urquhart = new Map();\n    edges.forEach((edge, i) => {\n      const u = edge.join(\"-\");\n      _lengths.set(u, distances[i]);\n      _urquhart.set(u, true);\n    });\n\n    triangles.forEach(tri => {\n      let l = 0,\n        remove = -1;\n      for (let j = 0; j < 3; j++) {\n        let u = extent([tri[j], tri[(j + 1) % 3]]).join(\"-\");\n        if (_lengths.get(u) > l) {\n          l = _lengths.get(u);\n          remove = u;\n        }\n      }\n      _urquhart.set(remove,  false);\n    });\n\n    return edges.map(edge => _urquhart.get(edge.join(\"-\")));\n  };\n}\n\nfunction geo_hull(triangles, points) {\n  const _hull = new Set(),\n    hull = [];\n  triangles.map(tri => {\n    if (excess(tri.map(i => points[i > points.length ? 0 : i])) > 1e-12) return;\n    for (let i = 0; i < 3; i++) {\n      let e = [tri[i], tri[(i + 1) % 3]],\n        code = `${e[0]}-${e[1]}`;\n      if (_hull.has(code)) _hull.delete(code);\n      else _hull.add(`${e[1]}-${e[0]}`);\n    }\n  });\n\n  const _index = new Map;\n  let start;\n  _hull.forEach(e => {\n    e = e.split(\"-\").map(Number);\n    _index.set(e[0],e[1]);\n    start = e[0];\n  });\n\n  if (start === undefined) return hull;\n\n  let next = start;\n  do {\n    hull.push(next);\n    let n = _index.get(next);\n    _index.set(next, -1);\n    next = n;\n  } while (next > -1 && next !== start);\n\n  return hull;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}