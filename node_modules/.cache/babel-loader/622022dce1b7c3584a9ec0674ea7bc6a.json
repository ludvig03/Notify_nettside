{"ast":null,"code":"import { FileLoader, Loader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const font = scope.parse(JSON.parse(text));\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n} //\n\n\nclass Font {\n  constructor(data) {\n    this.isFont = true;\n    this.type = 'Font';\n    this.data = data;\n  }\n\n  generateShapes(text) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n    const shapes = [];\n    const paths = createPaths(text, size, this.data);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      shapes.push(...paths[p].toShapes());\n    }\n\n    return shapes;\n  }\n\n}\n\nfunction createPaths(text, size, data) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n      offsetX += ret.offsetX;\n      paths.push(ret.path);\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          cpx2 = outline[i++] * scale + offsetX;\n          cpy2 = outline[i++] * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\n\nexport { FontLoader, Font };","map":{"version":3,"names":["FileLoader","Loader","ShapePath","FontLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","font","parse","JSON","json","Font","data","isFont","type","generateShapes","size","shapes","paths","createPaths","p","pl","length","push","toShapes","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["/Users/ludvigbergsaker/Documents/Notify/notify_custom/notify_custom/node_modules/three/examples/jsm/loaders/FontLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}