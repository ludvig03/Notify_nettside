{"version":3,"file":"functions.js","sources":["../src/utils.ts","../src/center.ts","../src/colorspace.ts","../src/dedup.ts","../src/dequantize.ts","../src/draco.ts","../src/inspect.ts","../src/instance.ts","../src/prune.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/partition.ts","../src/resample.ts","../src/sequence.ts","../src/weld.ts","../src/simplify.ts","../src/list-texture-channels.ts","../src/list-texture-slots.ts","../src/squoosh.ts","../src/tangents.ts","../src/texture-resize.ts","../src/unpartition.ts","../src/unlit.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Accessor, Primitive, Texture, Transform, TransformContext } from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n\tinputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace(options: ColorspaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or ` +\n\t\t\t\t\t'\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tILogger,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tRoot,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MESH, PropertyType.TEXTURE, PropertyType.MATERIAL],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction dedupAccessors(logger: ILogger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => attributeAccessors.add(accessor));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}` + ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among` +\n\t\t\t` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates: Map<Material, Material> = new Map();\n\tconst skip = new Set(['name']);\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t// eslint-disable-next-line max-len\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listMaterials().length} materials.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(MeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { DracoMeshCompression } from '@gltf-transform/extensions';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link DracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link DracoMeshCompression} extension itself.\n */\nexport const draco = (_options: DracoOptions): Transform => {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn (doc: Document): void => {\n\t\tdoc.createExtension(DracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? DracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: DracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t};\n};\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tbounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = bounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tthrow new Error(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(doc: Document, batchExtension: MeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tGraph,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tNode,\n\tScene,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.has(PropertyType.NODE) && !options.keepLeaves) root.listScenes().forEach(nodeTreeShake);\n\t\tif (propertyTypes.has(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed)\n\t\t\t\t.map((t) => `${t} (${disposed[t]})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph\n\t\t\t\t.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Iteratively prunes leaf Nodes without contents. */\n\t\tfunction nodeTreeShake(prop: Node | Scene): void {\n\t\t\tprop.listChildren().forEach(nodeTreeShake);\n\n\t\t\tif (prop instanceof Scene) return;\n\n\t\t\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\t\t\tconst ptype = e.getParent().propertyType;\n\t\t\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t\t\t});\n\t\t\tconst isEmpty = graph.listChildren(prop).length === 0;\n\t\t\tif (isEmpty && !isUsed) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\t});\n};\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: typeof MeshoptEncoder;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nexport function createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexElements(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexElements(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexElements(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexElements(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst delta = normalized ? MathUtils.denormalize(1, componentType) : Number.EPSILON;\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexElements(prim, i, 'WEIGHTS', weights);\n\n\t\tlet weightsSum = sum(weights);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.normalize(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.denormalize(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += 1 - weightsSum;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetVertexElements(prim, i, 'WEIGHTS', weights);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexElements(prim: PrimLike, vertexIndex: number, prefix: string, target: TypedArray): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) target[i * 4 + j] = el[j];\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexElements(prim: PrimLike, vertexIndex: number, prefix: string, values: TypedArray): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) el[j] = values[i * 4 + j];\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) sum += values[i];\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\nimport { sortPrimitiveWeights } from './sort-primitive-weights';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tif (parent.getSkin()) {\n\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// prune()+dedup() will clean this up later.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nexport { quantize };\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { MeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder';\nimport { quantize } from './quantize';\n\nexport interface MeshoptOptions {\n\tencoder: typeof MeshoptEncoder;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = { level: 'high' };\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link MeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link MeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n */\nexport const meshopt = (_options: MeshoptOptions): Transform => {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn async (document: Document): Promise<void> => {\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t\t\tpattern: options.level === 'medium' ? /.*/ : /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/,\n\t\t\t\tquantizePosition: 14,\n\t\t\t\tquantizeTexcoord: 12,\n\t\t\t\tquantizeColor: 8,\n\t\t\t\tquantizeNormal: 8,\n\t\t\t})\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(MeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? MeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: MeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t};\n};\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tMaterialsIOR,\n\tMaterialsPBRSpecularGlossiness,\n\tMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR);\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","\nimport type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld';\nimport { createTransform } from './utils';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import { Accessor, AnimationSampler, Document, Root, Transform, TransformContext } from '@gltf-transform/core';\nimport { createTransform, isTransformPending } from './utils';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {tolerance?: number}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> =  {tolerance: 1e-4};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\n\tconst options = {...RESAMPLE_DEFAULTS, ..._options} as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, (doc: Document, context?: TransformContext): void => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst accessorsCountPrev = doc.getRoot().listAccessors().length;\n\t\tconst logger = doc.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst morphTargetSamplers = new Set<AnimationSampler>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tif (channel.getSampler() && channel.getTargetPath() === 'weights') {\n\t\t\t\t\tmorphTargetSamplers.add(channel.getSampler()!);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (morphTargetSamplers.has(sampler)) {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP'\n\t\t\t\t\t|| sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\tif (doc.getRoot().listAccessors().length > accessorsCountPrev && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tlogger.warn(\n\t\t\t\t`${NAME}: Resampling required copying accessors, some of which may be duplicates.`\n\t\t\t\t+ ' Consider using \"dedup\" to consolidate any duplicates.'\n\t\t\t);\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction optimize (sampler: AnimationSampler, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++ i) {\n\t\tconst time = input.getScalar(i);\n\t\tconst timePrev = input.getScalar(i - 1);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst timeMix = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\tfor (let j = 0; j < output.getElementSize(); j++) {\n\t\t\t\tconst value = output.getElement(i, tmp)[j];\n\t\t\t\tconst valuePrev = output.getElement(i - 1, tmp)[j];\n\t\t\t\tconst valueNext = output.getElement(i + 1, tmp)[j];\n\n\t\t\t\tif (sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\t// Prune keyframes that are colinear with prev/next keyframes.\n\t\t\t\t\tif (Math.abs(value - lerp(valuePrev, valueNext, timeMix)) > tolerance) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (sampler.getInterpolation() === 'STEP') {\n\t\t\t\t\t// Prune keyframes that are identical to prev/next keyframes.\n\t\t\t\t\tif (value !== valuePrev || value !== valueNext) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp (v0: number, v1: number, t: number): number {\n    return v0 * (1 - t) + v1 * t;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { createIndices, createTransform, formatDeltaOp, isTransformPending } from './utils';\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.5, // [-1, 1]\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance, as a fraction of primitive AABB, used when merging similar vertices. */\n\ttolerance?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\toverwrite: true,\n};\n\n/**\n * Index {@link Primitive}s and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```js\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001 })\n * );\n * ```\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance > 0.1 || options.tolerance < 0) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ tolerance ≤ 0.1`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getIndices() && !options.overwrite) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (prim.getMode() === Primitive.Mode.POINTS) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (options.tolerance === 0) {\n\t\t\t\t\tweldOnly(doc, prim);\n\t\t\t\t} else {\n\t\t\t\t\tweldAndMerge(doc, prim, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// TODO(perf): Suppose we just invoked simplify(), and dedup is not explicitly\n\t\t// in the transform stack .... now we are going to run it twice!\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**  In-place weld, adds indices without changing number of vertices. */\nfunction weldOnly(doc: Document, prim: Primitive): void {\n\tif (prim.getIndices()) return;\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indicesArray = numVertices <= 65534 ? new Uint16Array(numVertices) : new Uint32Array(numVertices);\n\tconst indices = doc.createAccessor().setBuffer(buffer).setType(Accessor.Type.SCALAR).setArray(indicesArray);\n\tfor (let i = 0; i < indices.getCount(); i++) indices.setScalar(i, i);\n\tprim.setIndices(indices);\n}\n\n/** Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction weldAndMerge(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!));\n\n\t// (1) Compute per-attribute tolerances, pre-sort vertices.\n\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, tolerance);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tuniqueIndices.sort((a, b) => {\n\t\tsrcPosition.getElement(a, posA);\n\t\tsrcPosition.getElement(b, posB);\n\t\treturn posA[0] > posB[0] ? 1 : -1;\n\t});\n\n\t// (2) Compare and identify vertices to weld. Use sort to keep iterations below O(n²),\n\n\tconst weldMap = createIndices(uniqueIndices.length); // oldIndex → oldCommonIndex\n\tconst writeMap = createIndices(uniqueIndices.length); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\tlet backIters = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\n\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\tconst b = weldMap[uniqueIndices[j]];\n\n\t\t\tsrcPosition.getElement(a, posA);\n\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t// Sort order allows early exit on X-axis distance.\n\t\t\tif (Math.abs(posA[0] - posB[0]) > attributeTolerance['POSITION']) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbackIters++;\n\n\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t});\n\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\tweldMap[a] = b;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++; // note: reorders the primitive on x-axis sort.\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Iterations per vertex: ${Math.round(backIters / uniqueIndices.length)} (avg)`);\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: Uint32Array | Uint16Array,\n\tdstCount: number\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, tolerance: number): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return Tolerance.NORMAL;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst range = Math.max(..._b) - Math.min(..._a) || 1;\n\treturn tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils';\nimport { weld } from './weld';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: typeof MeshoptSimplifier;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.5 (50%). */\n\tratio?: number;\n\t/** Target error, as a fraction of mesh radius. Default: 0.01 (1%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.5,\n\terror: 0.001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * Example:\n *\n * ```javascript\n * import { simplify } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n */\nexport const simplify = (_options: SimplifyOptions): Transform => {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\t\t\t}\n\t\t}\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = options.simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : []\n\t);\n\n\tconst [remap, unique] = options.simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import type { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(document, texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n */\nexport function listTextureChannels(document: Document, texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(document, texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(document, texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(document: Document, texture: Texture): number {\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import type { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(document, texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(doc: Document, texture: Texture): string[] {\n\tconst root = doc.getRoot();\n\tconst slots = doc\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import { Document, TextureChannel, Transform } from '@gltf-transform/core';\nimport { TextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels';\nimport { listTextureSlots } from './list-texture-slots';\nimport type { SquooshLib } from './types/squoosh-lib';\nimport { formatBytes } from './utils';\n\nenum Codec {\n\tOXIPNG = 'oxipng',\n\tMOZJPEG = 'mozjpeg',\n\tWEBP = 'webp',\n}\n\nconst CODEC_TO_MIME_TYPE: Record<Codec, string> = {\n\t[Codec.OXIPNG]: 'image/png',\n\t[Codec.MOZJPEG]: 'image/jpeg',\n\t[Codec.WEBP]: 'image/webp',\n};\n\n// TODO(feat): There are _many_ other encoder options for each of the\n// codecs provided here, but the options are mostly undocumented. If\n// anyone is willing to contribute documentation on what the options\n// are, I'm happy to expose more here.\n// See: https://github.com/GoogleChromeLabs/squoosh/blob/dev/libsquoosh/src/codecs.ts\nexport interface SquooshOptions {\n\tsquoosh: unknown;\n\tjobs?: number;\n\tformats?: RegExp;\n\tslots?: RegExp;\n\tauto?: boolean;\n}\n\ninterface SquooshInternalOptions extends SquooshOptions {\n\tcodec: Codec;\n}\n\nconst SQUOOSH_DEFAULTS: Required<Omit<Omit<SquooshInternalOptions, 'codec'>, 'squoosh'>> = {\n\tjobs: 4,\n\tformats: /.*/,\n\tslots: /.*/,\n\tauto: false,\n};\n\nconst WEBP_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.WEBP,\n};\nconst MOZJPEG_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.MOZJPEG,\n\tformats: /^image\\/jpeg$/,\n};\nconst OXIPNG_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.OXIPNG,\n\tformats: /^image\\/png$/,\n};\n\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\n\nlet pool: SquooshLib.ImagePool | null = null;\nlet poolUsers = 0;\n\nconst requestImagePool = (squoosh: typeof SquooshLib, jobs: number): SquooshLib.ImagePool => {\n\tif (!pool) {\n\t\tpool = new squoosh.ImagePool(jobs);\n\t}\n\tpoolUsers++;\n\treturn pool;\n};\n\nconst releaseImagePool = (): void => {\n\tpoolUsers--;\n\tif (pool && poolUsers <= 0) {\n\t\tpool.close(); // Required for process to exit.\n\t\tpool = null;\n\t}\n};\n\n/** @internal Shared base for {@link webp()}, {@link mozjpeg()}, and {@link oxipng()}. */\nexport const squoosh = function (_options: SquooshInternalOptions): Transform {\n\tconst options = { ...SQUOOSH_DEFAULTS, ..._options } as Required<SquooshInternalOptions>;\n\tconst squoosh = options.squoosh as typeof SquooshLib | null;\n\tconst codec = options.codec;\n\n\tif (!squoosh) {\n\t\tthrow new Error(`${codec}: squoosh dependency required — install \"@squoosh/lib\".`);\n\t}\n\n\treturn async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\t\tconst pool = requestImagePool(squoosh, options.jobs);\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(document, texture);\n\t\t\t\tconst channels = getTextureChannelMask(document, texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${codec}:texture(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!options.formats.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slots.length && !slots.some((slot) => options.slots.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.codec === Codec.MOZJPEG && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${prefix}: Slots → [${slots.join(', ')}]`);\n\n\t\t\t\t// COMPRESS: Run `squoosh/lib` library.\n\n\t\t\t\tconst image = pool.ingestImage(texture.getImage()!);\n\t\t\t\tconst srcByteLength = texture.getImage()!.byteLength;\n\n\t\t\t\tawait image.encode({ [options.codec]: options.auto ? 'auto' : {} });\n\n\t\t\t\tconst encodedImage = await image.encodedWith[options.codec];\n\n\t\t\t\tlogger.debug(`${prefix}: ${JSON.stringify(encodedImage.optionsUsed)}`);\n\n\t\t\t\ttexture.setImage(encodedImage.binary).setMimeType(CODEC_TO_MIME_TYPE[options.codec]);\n\t\t\t\tconst dstByteLength = encodedImage.binary.byteLength;\n\n\t\t\t\tlogger.debug(`${prefix}: ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}`);\n\t\t\t})\n\t\t);\n\n\t\treleaseImagePool();\n\n\t\tlogger.debug(`${codec}: Complete.`);\n\t};\n};\n\n/**\n * Converts images to WebP, using the {@link TextureWebP} extension.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { webp } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \twebp({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const webp = function (options: SquooshOptions): Transform {\n\tconst _options = { ...WEBP_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn async (document: Document): Promise<void> => {\n\t\tawait squoosh(_options)(document);\n\n\t\t// Attach EXT_texture_web if needed.\n\t\tconst textures = document.getRoot().listTextures();\n\t\tif (textures.some((texture) => texture.getMimeType() === CODEC_TO_MIME_TYPE[Codec.WEBP])) {\n\t\t\tdocument.createExtension(TextureWebP).setRequired(true);\n\t\t}\n\t};\n};\n\n/**\n * Optimizes JPEG images by default, optionally converting PNG textures to JPEG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { mozjpeg } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tmozjpeg({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const mozjpeg = function (options: SquooshOptions): Transform {\n\tconst _options = { ...MOZJPEG_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn (document: Document): void => {\n\t\treturn squoosh(_options)(document);\n\t};\n};\n\n/**\n * Optimizes PNG images by default, optionally converting JPEG textures to PNG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { oxipng } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \toxipng({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const oxipng = function (options: SquooshOptions): Transform {\n\tconst _options = { ...OXIPNG_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn (document: Document): void => {\n\t\treturn squoosh(_options)(document);\n\t};\n};\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport type { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { listTextureSlots } from './list-texture-slots';\nimport { createTransform } from './utils';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern to match slots usage for resizing. */\n\tslots?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null,\n\tslots: null,\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = { ...TEXTURE_RESIZE_DEFAULTS, ..._options } as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern || options.pattern.test(name) || options.pattern.test(uri);\n\t\t\tif (!match) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`${NAME}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst slots = listTextureSlots(doc, texture);\n\t\t\tif (options.slots && !slots.some((slot) => options.slots?.test(slot))) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, not within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(new Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]);\n\n\t\t\tlogger.debug(`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`);\n\t\t\tlogger.debug(`${NAME}: Slots → [${slots.join(', ')}]`);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n */\nconst unpartition = (_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform => {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport { unpartition };\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { MaterialsUnlit } from '@gltf-transform/extensions';\n\nexport const unlit = (): Transform => {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(MaterialsUnlit) as MaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n};\n"],"names":["rewriteTexture","source","target","fn","srcImage","getImage","getPixels","getMimeType","pixels","i","shape","j","savePixels","dstImage","setImage","setMimeType","createTransform","name","Object","defineProperty","value","isTransformPending","context","initial","pending","stack","lastIndexOf","SetMap","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","formatBytes","bytes","decimals","dm","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDeltaOp","a","b","abs","formatDelta","deepListAttributes","prim","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","getCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","length","CENTER_DEFAULTS","pivot","NAME","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","dedup","_options","options","propertyType","includes","Error","doc","logger","getLogger","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","getRoot","listMeshes","forEach","mesh","listPrimitives","primitive","accessor","indices","getIndices","animation","listAnimations","sampler","listSamplers","input","getInput","output","getOutput","detectDuplicates","duplicateAccessors","aData","BufferUtils","toView","getType","getComponentType","getNormalized","equals","duplicateIndices","debug","duplicateAttributes","duplicateInputs","duplicateOutputs","dispose","dedupAccessors","root","refs","listAccessors","index","listMaterials","material","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","join","targetMesh","listParents","parent","ROOT","dedupMeshes","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","property","Root","dedupImages","materials","skip","dedupMaterials","primKeyItems","semantic","listSemantics","getAttribute","Primitive","getMaterial","getMode","DEQUANTIZE_DEFAULTS","pattern","dequantizePrimitive","dequantizeAttribute","test","getComponentSize","Float32Array","il","el","getElement","setElement","setNormalized","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","listScenes","properties","map","scene","listChildren","sceneBounds","bounds","getName","rootName","bboxMin","toPrecision","min","bboxMax","max","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","accessorToTypeLabel","targ","position","Mode","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","getGLPrimitiveCount","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","extensions","listExtensions","slots","getGraph","listEdges","ref","child","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentEdges","edge","resolution","ImageUtils","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","getMin","getMax","keyframes","channels","listChannels","samplers","duration","round","NumericTypeLabels","Uint8Array","Int32Array","Int16Array","Int8Array","Number","constructor","INSTANCE_DEFAULTS","pruneUnusedNodes","nodes","node","unusedNodes","pop","getCamera","getMesh","getSkin","nodeParent","Node","createBatch","batchExtension","buffer","getBuffer","batchTranslation","createAccessor","setType","setBuffer","batchRotation","batchScale","createInstancedMesh","setAttribute","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","prune","graph","disposed","nodeTreeShake","prop","Scene","isUsed","some","e","ptype","SCENE","markDisposed","listNodes","treeShake","listSkins","listCameras","indirectTreeShake","channel","getTargetNode","listBuffers","str","t","info","p","AnimationChannel","REORDER_DEFAULTS","reorder","encoder","ready","plan","createLayoutPlan","srcIndices","indicesToAttributes","dstIndices","clone","indicesArray","unique","reorderMesh","indicesToMode","srcAttribute","dstAttribute","attributesToPrimitives","transform","warn","document","sortPrimitiveWeights","limit","isFinite","vertexCount","setCount","startsWith","srcWeights","dstWeights","srcJoints","dstJoints","getVertexElements","setVertexElements","weights","joints","normList","typeList","isNormalizeSafe","templateAttribute","templateArray","componentType","normalized","delta","MathUtils","denormalize","EPSILON","fill","weightsSum","sum","intValue","normalize","normalizePrimitiveWeights","vertexIndex","prefix","values","SIGNED_INT","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","nodeTransform","createExtension","MeshQuantization","setRequired","getNodeTransform","bboxes","result","bbox","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","scale","quantizePrimitive","bits","ctor","getQuantizationSettings","invert","fromTransform","fromScaling","transformMat4","quantizeAttribute","volume","offset","transformMatrix","animChannels","isAnimated","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","createNode","setMesh","addChild","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","getExtension","getThicknessFactor","setThicknessFactor","setExtension","setMaterial","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","sign","getMinNormalized","getMaxNormalized","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","fromRotationTranslationScale","MESHOPT_DEFAULTS","level","state","pact","_isSettledPact","thenable","s","METALROUGH_DEFAULTS","UNWELD_DEFAULTS","unweld","visited","srcVertexCount","unweldAttribute","dstVertexCount","setIndices","ArrayCtor","getScalar","NORMALS_DEFAULTS","overwrite","computeNormal","c","A","B","PARTITION_DEFAULTS","animations","createBufferURI","basename","existing","RESAMPLE_DEFAULTS","tolerance","optimize","lastIndex","tmp","writeIndex","time","timePrev","timeNext","timeMix","keep","valuePrev","valueNext","getInterpolation","setScalar","setInput","setOutput","SEQUENCE_DEFAULTS","fps","WELD_DEFAULTS","weld","weldOnly","weldAndMerge","numVertices","Accessor","Type","SCALAR","srcPosition","uniqueIndices","attributeTolerance","getAttributeTolerance","kv","posA","posB","weldMap","writeMap","backIters","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","dstIndicesArray","srcAttr","swapAttributes","dstAttrArray","dstAttr","done","_a","_b","_semantic","SIMPLIFY_DEFAULTS","ratio","error","lockBorder","simplifyPrimitive","positionArray","ComponentType","FLOAT","UNSIGNED_INT","targetCount","simplifier","simplify","compactMesh","getTextureChannelMask","mask","getAttributes","Material","AlphaMode","OPAQUE","TextureChannel","listTextureSlots","Codec","CODEC_TO_MIME_TYPE","[object Object]","OXIPNG","MOZJPEG","WEBP","SQUOOSH_DEFAULTS","jobs","formats","auto","WEBP_DEFAULTS","codec","MOZJPEG_DEFAULTS","OXIPNG_DEFAULTS","SUPPORTED_MIME_TYPES","pool","poolUsers","requestImagePool","squoosh","ImagePool","releaseImagePool","close","Promise","all","textureIndex","textureLabel","slot","image","ingestImage","srcByteLength","encode","encodedWith","encodedImage","JSON","stringify","optionsUsed","binary","dstByteLength","TANGENTS_DEFAULTS","getNormalTexcoord","normalTextureInfo","getNormalTextureInfo","getTexCoord","filterPrimitive","meshName","_Pact","bind","o","prototype","onFulfilled","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","UNPARTITION_DEFAULTS","offsetNode","setTranslation","getTranslation","inputEncoding","converted","sRGBToLinear","updatePrimitive","color","DracoMeshCompression","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","scenes","MeshGPUInstancing","numBatches","numInstances","meshInstances","traverse","modifiedNodes","batch","batchNode","needsTranslation","needsRotation","needsScale","r","getWorldTranslation","getWorldRotation","getWorldScale","eq","R","G","MeshoptCompression","QUANTIZE","FILTER","specGlossExtension","tex","inputTextures","listExtensionsUsed","ext","extensionName","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","MaterialsPBRSpecularGlossiness","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","modified","normal","faceNormal","existingURIs","meshIndex","isArray","createBuffer","setURI","primTarget","partitionMeshes","animIndex","partitionAnimations","accessorsVisited","accessorsCountPrev","didSkipMorphTargets","morphTargetSamplers","getSampler","sequenceNodes","match","createAnimation","animBuffer","inputArray","outputArray","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","generateTangents","attributeIDs","tangentCache","meshPrimitives","texcoordSemantic","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","message","_setImage","unlit","MaterialsUnlit","createUnlit","TextureWebP"],"mappings":"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"}