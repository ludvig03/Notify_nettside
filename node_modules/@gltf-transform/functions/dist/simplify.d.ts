import { Document, Primitive, Transform } from '@gltf-transform/core';
import type { MeshoptSimplifier } from 'meshoptimizer';
/** Options for the {@link simplify} function. */
export interface SimplifyOptions {
    /** MeshoptSimplifier instance. */
    simplifier: typeof MeshoptSimplifier;
    /** Target ratio (0â€“1) of vertices to keep. Default: 0.5 (50%). */
    ratio?: number;
    /** Target error, as a fraction of mesh radius. Default: 0.01 (1%). */
    error?: number;
    /**
     * Whether to lock topological borders of the mesh. May be necessary when
     * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping
     * to ensure no seams appear.
     */
    lockBorder?: boolean;
}
export declare const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>>;
/**
 * Simplification algorithm, based on meshoptimizer, producing meshes with fewer
 * triangles and vertices. Simplification is lossy, but the algorithm aims to
 * preserve visual quality as much as possible for given parameters.
 *
 * Example:
 *
 * ```javascript
 * import { simplify } from '@gltf-transform/functions';
 * import { MeshoptSimplifier } from 'meshoptimizer';
 *
 * await document.transform(
 *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75 })
 * );
 * ```
 *
 * References:
 * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier
 */
export declare const simplify: (_options: SimplifyOptions) => Transform;
export declare function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive;
